apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-jenkins-config
  labels:
    app: jenkins
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
data:
  jenkins.yaml: |-
    jenkins:
      systemMessage: "Jenkins configured for CI/CD Pipeline"
      numExecutors: 2
      securityRealm:
        local:
          allowsSignup: false
          users:
            - id: "{{ .Values.admin.name }}"
              password: "{{ .Values.admin.password }}"
      authorizationStrategy:
        loggedInUsersCanDoAnything:
          allowAnonymousRead: false
    
    tool:
      git:
        installations:
        - name: "Default"
          home: "/usr/bin/git"
      dockerTool:
        installations:
        - name: "Docker"
          home: "/usr/bin/docker"
    
    unclassified:
      sonarGlobalConfiguration:
        installations:
        - name: "SonarQube"
          serverUrl: "{{ .Values.sonarqube.url }}"
          credentialsId: "sonar-token"
    
    credentials:
      system:
        domainCredentials:
        - credentials:
          - string:
              scope: GLOBAL
              id: "sonar-token"
              secret: "${SONAR_TOKEN}"
              description: "SonarQube authentication token"
          - usernamePassword:
              scope: GLOBAL
              id: "github-credentials"
              username: "${GITHUB_USERNAME}"
              password: "${GITHUB_TOKEN}"
              description: "GitHub credentials"
      
    jobs:
      - script: >
          pipelineJob('flask-app-pipeline') {
            description('Flask Application CI/CD Pipeline')
            definition {
              cpsScm {
                scm {
                  git {
                    remote {
                      url('{{ .Values.pipeline.gitUrl }}')
                      credentials('github-credentials')
                    }
                    branch('*/main')
                    branch('*/task_6')
                  }
                }
                scriptPath('Jenkinsfile')
              }
            }
            triggers {
              scm('H/5 * * * *')
            }
          }
    