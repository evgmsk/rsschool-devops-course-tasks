pipeline {

   agent {
        kubernetes {
            yaml """
            apiVersion: v1
            kind: Pod
            metadata:
              labels:
                jenkins-agent: "true"
            spec:
              imagePullSecrets:
              - name: ecr-credentials
              containers:
              - name: jnlp
                image: jenkins/inbound-agent:alpine-jdk17
                volumeMounts:
                - mountPath: /home/jenkins/agent
                  name: workspace-volume
                tty: true
                envFrom:
                    - secretRef:
                        name: github-credentials
                    - secretRef:
                        name: jenkins-sonar-token
              - name: docker
                image: docker:dind
                securityContext:
                  privileged: true
                volumeMounts:
                - mountPath: /home/jenkins/agent
                  name: workspace-volume
              - name: aws
                image: amazon/aws-cli:latest
                command:
                - cat
                tty: true
                volumeMounts:
                - mountPath: /home/jenkins/agent
                  name: workspace-volume
              - name: kubectl
                image: bitnami/kubectl:latest
                command:
                - cat
                tty: true
                volumeMounts:
                - mountPath: /home/jenkins/agent
                  name: workspace-volume
              - name: helm
                image: alpine/helm:latest
                command:
                - cat
                tty: true
                volumeMounts:
                - mountPath: /home/jenkins/agent
                  name: workspace-volume
              volumes:
              - name: workspace-volume
                emptyDir: {}
            """
        }
    }

    parameters {
        booleanParam(name: 'FORCE_DEPLOY', defaultValue: true, description: 'Force deployment even if not on main branch')
    }

    environment {
        IMAGE_NAME = "753350392043.dkr.ecr.eu-west-1.amazonaws.com/jenkins-agent:latest"
        ECR_REGISTRY = '753350392043.dkr.ecr.eu-west-1.amazonaws.com'
        ECR_REPOSITORY = 'rs-flask-app'
        AWS_REGION = 'eu-west-1'
        IMAGE_TAG = "${BUILD_NUMBER}"
        SONAR_PROJECT_KEY = 'flask-app'
        APP_DIR = 'task6'
    }

    stages {

        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/task_6']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/evgmsk/rsschool-devops-course-tasks.git',
                        credentialsId: 'github-credentials'
                    ]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [[$class: 'WipeWorkspace']], // clears stale repo
                    submoduleCfg: [],
                    ])

            }
        }

        stage('Build Application') {
            steps {
                dir("${APP_DIR}") {
                    sh """
                        echo \"Installing Python dependencies...\"
                        python3 -m venv ./venv || python -m venv ./venv
                        . ./venv/bin/activate
                        pip install flask pytest pytest-cov
                    """
                }
            }
        }

        stage('Unit Tests') {
            steps {
                dir("${APP_DIR}") {
                    sh """
                        . ./venv/bin/activate
                        python -m pytest tests/ --junitxml=test-results.xml --cov=. --cov-report=xml
                    """
                }
            }
            post {
                always {
                    junit "${APP_DIR}/test-results.xml"
                }
            }
        }

        stage('Build & Push Docker Image') {
            when {
                anyOf {
                    branch 'main'
                    branch 'task_6'
                    expression { return params.FORCE_DEPLOY == true }
                }
            }
            steps {
                dir("${APP_DIR}") {
                    script {
                        // Use AWS container for ECR login
                        container('aws') {
                            sh '''
                                echo "Logging in to ECR with AWS CLI..."
                                aws ecr get-login-password --region ${AWS_REGION} > /home/jenkins/agent/ecr_token.txt
                            '''
                        }
                        
                        // Use Docker container for build and push
                        container('docker') {
                            sh '''
                                echo "Logging in to ECR..."
                                cat /home/jenkins/agent/ecr_token.txt | docker login --username AWS --password-stdin ${ECR_REGISTRY}
                                rm /home/jenkins/agent/ecr_token.txt
                                
                                echo "Building Docker image..."
                                docker build -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} .
                                docker tag ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest

                                echo "Pushing image to ECR..."
                                docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
                                docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest
                            '''
                        }
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            when {
                anyOf {
                    branch 'main'
                    branch 'task_6'
                    expression { return params.FORCE_DEPLOY == true }
                }
            }
            input {
                message "Deploy to Kubernetes?"
                ok "Deploy"
                parameters {
                    choice(name: 'ENVIRONMENT', choices: ['dev', 'staging', 'prod'], description: 'Select environment')
                }
            }
            steps {
                script {
                    def ns = "flask-app-${ENVIRONMENT}"
                    echo "Deploying to namespace: ${ns}"
                    
                    // Update values.yaml with the new image tag
                    sh "sed -i 's/tag: .*/tag: ${IMAGE_TAG}/' ./flask-app/values.yaml"
                    
                    // Use Helm container for deployment
                    container('helm') {
                        sh '''
                            echo "Deploying with Helm..."
                            helm upgrade --install flask-app-${ENVIRONMENT} ./flask-app \\
                                --namespace ${ns} \\
                                --create-namespace \\
                                --set image.tag=${IMAGE_TAG} \\
                                --set environment=${ENVIRONMENT} \\
                                -f ./flask-app/ecr-values.yaml
                        '''
                    }
                    
                    // Use Kubectl container to check deployment status
                    container('kubectl') {
                        sh '''
                            echo "Checking deployment status..."
                            kubectl rollout status deployment/flask-app-flask-app-${ENVIRONMENT} -n ${ns}
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo '✅ Pipeline completed successfully!'
        }
        failure {
            echo '❌ Pipeline failed!'
        }
    }
}