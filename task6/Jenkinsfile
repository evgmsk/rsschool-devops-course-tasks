pipeline {

   agent {
        kubernetes {
            yaml """
            apiVersion: v1
            kind: Pod
            metadata:
              labels:
                jenkins-agent: "true"
            spec:
              containers:
              - name: jnlp
                image: jenkins/inbound-agent:alpine-jdk17
                volumeMounts:
                - mountPath: /home/jenkins/agent
                  name: workspace-volume
                - mountPath: /var/run/docker.sock
                  name: docker-sock
              volumes:
              - name: workspace-volume
                emptyDir: {}
              - name: docker-sock
                hostPath:
                  path: /var/run/docker.sock
            """
        }
    }

    environment {
        IMAGE_NAME = "753350392043.dkr.ecr.eu-west-1.amazonaws.com/jenkins-agent:latest"
        ECR_REGISTRY = '753350392043.dkr.ecr.eu-west-1.amazonaws.com'
        ECR_REPOSITORY = 'rs-flask-app'
        AWS_REGION = 'eu-west-1'
        IMAGE_TAG = "${BUILD_NUMBER}"
        SONAR_PROJECT_KEY = 'flask-app'
        APP_DIR = 'task6'
    }

    stages {

        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/task_6']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/evgmsk/rsschool-devops-course-tasks.git',
                        credentialsId: 'github-credentials'
                    ]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [[$class: 'WipeWorkspace']], // clears stale repo
                    submoduleCfg: [],
                    ])

            }
        }

        stage('Build Application') {
            steps {
                dir("${APP_DIR}") {
                    sh '''
                        echo "Installing Python dependencies..."
                        pip install -r requirements.txt
                    '''
                }
            }
        }

        stage('Unit Tests') {
            steps {
                dir("${APP_DIR}") {
                    sh '''
                        pytest tests/ --junitxml=test-results.xml --cov=. --cov-report=xml
                    '''
                }
            }
            post {
                always {
                    publishTestResults testResultsPattern: "${APP_DIR}/test-results.xml"
                    publishCoverage adapters: [coberturaAdapter("${APP_DIR}/coverage.xml")], sourceFileResolver: sourceFiles('STORE_LAST_BUILD')
                }
            }
        }

        stage('Security Check - SonarQube') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    dir("${APP_DIR}") {
                        sh '''
                            sonar-scanner \
                                -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                                -Dsonar.sources=. \
                                -Dsonar.host.url=${SONAR_HOST_URL} \
                                -Dsonar.login=${SONAR_AUTH_TOKEN} \
                                -Dsonar.python.coverage.reportPaths=coverage.xml \
                                -Dsonar.python.xunit.reportPath=test-results.xml
                        '''
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Build & Push Docker Image') {
            when {
                anyOf {
                    branch 'main'
                    branch 'task_6'
                    expression { return params.FORCE_DEPLOY == true }
                }
            }
            steps {
                dir("${APP_DIR}") {
                    sh '''
                        echo "Logging in to ECR..."
                        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}

                        echo "Building Docker image..."
                        docker build -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} .
                        docker tag ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest

                        echo "Pushing image to ECR..."
                        docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
                        docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest
                    '''
                }
            }
        }

        stage('Deploy to Kubernetes') {
            when {
                anyOf {
                    branch 'main'
                    branch 'task_6'
                    expression { return params.FORCE_DEPLOY == true }
                }
            }
            input {
                message "Deploy to Kubernetes?"
                ok "Deploy"
                parameters {
                    choice(name: 'ENVIRONMENT', choices: ['dev', 'staging', 'prod'], description: 'Select environment')
                }
            }
            steps {
                script {
                    def ns = "flask-app-${ENVIRONMENT}"
                    echo "Deploying to namespace: ${ns}"
                    sh """
                        sed -i "s/tag: .*/tag: ${IMAGE_TAG}/" helm-chart/values.yaml

                        helm upgrade --install flask-app-${ENVIRONMENT} ./helm-chart \
                            --namespace ${ns} \
                            --create-namespace \
                            --set image.tag=${IMAGE_TAG} \
                            --set environment=${ENVIRONMENT} \
                            -f ecr-values.yaml

                        kubectl rollout status deployment/flask-app-flask-app-${ENVIRONMENT} -n ${ns}
                    """
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo '✅ Pipeline completed successfully!'
        }
        failure {
            echo '❌ Pipeline failed!'
        }
    }
}