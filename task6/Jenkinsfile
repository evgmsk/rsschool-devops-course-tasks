pipeline {

   agent {
        kubernetes {
            yaml """
            apiVersion: v1
            kind: Pod
            metadata:
              labels:
                jenkins-agent: "true"
            spec:
              imagePullSecrets:
              - name: ecr-credentials
              containers:
              - name: jnlp
                image: 753350392043.dkr.ecr.eu-west-1.amazonaws.com/jenkins-agent:latest
                volumeMounts:
                - mountPath: /home/jenkins/agent
                  name: workspace-volume
                - mountPath: /var/run/docker.sock
                  name: docker-sock
              volumes:
              - name: workspace-volume
                emptyDir: {}
              - name: docker-sock
                hostPath:
                  path: /var/run/docker.sock
            """
        }
    }

    parameters {
        booleanParam(name: 'FORCE_DEPLOY', defaultValue: true, description: 'Force deployment even if not on main branch')
    }

    environment {
        IMAGE_NAME = "753350392043.dkr.ecr.eu-west-1.amazonaws.com/jenkins-agent:latest"
        ECR_REGISTRY = '753350392043.dkr.ecr.eu-west-1.amazonaws.com'
        ECR_REPOSITORY = 'rs-flask-app'
        AWS_REGION = 'eu-west-1'
        IMAGE_TAG = "${BUILD_NUMBER}"
        SONAR_PROJECT_KEY = 'flask-app'
        APP_DIR = 'task6'
    }

    stages {

        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/task_6']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/evgmsk/rsschool-devops-course-tasks.git',
                        credentialsId: 'github-credentials'
                    ]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [[$class: 'WipeWorkspace']], // clears stale repo
                    submoduleCfg: [],
                    ])

            }
        }

        stage('Build Application') {
            steps {
                dir("${APP_DIR}") {
                    sh """
                        echo \"Installing Python dependencies...\"
                        # Create a new virtualenv instead of using the system one
                        python3 -m venv ./venv
                        . ./venv/bin/activate
                        pip install flask pytest pytest-cov
                    """
                }
            }
        }

        stage('Unit Tests') {
            steps {
                dir("${APP_DIR}") {
                    sh """
                        . ./venv/bin/activate
                        python -m pytest tests/ --junitxml=test-results.xml --cov=. --cov-report=xml
                    """
                }
            }
            post {
                always {
                    junit "${APP_DIR}/test-results.xml"
                }
            }
        }

        // stage('Security Check - SonarQube') {
        //     steps {
        //         withSonarQubeEnv('SonarQube') {
        //             dir("${APP_DIR}") {
        //                 sh """
        //                     sonar-scanner \\
        //                         -Dsonar.projectKey=${SONAR_PROJECT_KEY} \\
        //                         -Dsonar.sources=. \\
        //                         -Dsonar.host.url=http://sonarqube:9000 \\
        //                         -Dsonar.login=${SONAR_TOEKN} \\
        //                         -Dsonar.python.coverage.reportPaths=coverage.xml \\
        //                         -Dsonar.python.xunit.reportPath=test-results.xml
        //                 """
        //             }
        //         }
        //     }
        // }

        stage('Build & Push Docker Image') {
            when {
                anyOf {
                    branch 'main'
                    branch 'task_6'
                    expression { return params.FORCE_DEPLOY == true }
                }
            }
            steps {
                dir("${APP_DIR}") {
                    sh """
                         echo \"Logging in to ECR...\"
                        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}

                        echo \"Building Docker image...\"
                        docker build -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} .
                        docker tag ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest

                        echo \"Pushing image to ECR...\"
                        docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
                        docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest
                    """
                }
            }
        }

        stage('Deploy to Kubernetes') {
            when {
                anyOf {
                    branch 'main'
                    branch 'task_6'
                    expression { return params.FORCE_DEPLOY == true }
                }
            }
            input {
                message "Deploy to Kubernetes?"
                ok "Deploy"
                parameters {
                    choice(name: 'ENVIRONMENT', choices: ['dev', 'staging', 'prod'], description: 'Select environment')
                }
            }
            steps {
                script {
                    def ns = "flask-app-${ENVIRONMENT}"
                    echo "Deploying to namespace: ${ns}"
                    sh """
                        echo \"Setting up environment...\"
                        export PATH=$PATH:/usr/local/bin:/usr/bin
                        
                        sed -i \"s/tag: .*/tag: ${IMAGE_TAG}/\" ./flask-app/values.yaml

                        helm upgrade --install flask-app-${ENVIRONMENT} ./flask-app \\
                            --namespace ${ns} \\
                            --create-namespace \\
                            --set image.tag=${IMAGE_TAG} \\
                            --set environment=${ENVIRONMENT} \\
                            -f ./flask-app/ecr-values.yaml

                        kubectl rollout status deployment/flask-app-flask-app-${ENVIRONMENT} -n ${ns}
                    """
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo '✅ Pipeline completed successfully!'
        }
        failure {
            echo '❌ Pipeline failed!'
        }
    }
}